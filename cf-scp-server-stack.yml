---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  This template provides the resources for the Corp SCP Server

Parameters:

  VPC:
    Type: "AWS::EC2::VPC::Id"

  SCPUSER:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: netop-scp-user
    NoEcho: true

  SSHKeyName: 
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
    Default:  Sandbox-test-KP

  ImageID:
    Description: Image ID for the EC2 instances amazon linux 2
    Type: String
    Default:  ami-03603cffd09f888ee 

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro

  myip:
    Description: security group ip address 
    Type: String
    Default: 0.0.0.0/0

  ASGDesiredCapacity:
    Description: The number of EC2 instances lauched into the AutoScaling Group
    Type: String
    Default: 1

  EC2Subnets:
    Description: Subnets for ASG and ELB
    Type: "List<AWS::EC2::Subnet::Id>"

  EC2Name:
    Description: The Name Tag for the EC2 instance.  EG euw1lsscp01
    Type: String
    Default: "euw1l***"
  
  InternetSecurityGroup:
    Description: Internet security group
    Type: String
    Default: "sg-4c3f972a"

  prefixname:
    Description: The Name Tag for the EC2 Security Group. EG pi-ec2-cse-sftp
    Type: String
    Default: "itnw-scp"

  VolumeName:
    Description: The name to be used for the EFS volume
    Type: String
    MinLength: '1'
    Default: efs-jenkins-volume1

  PrivateSubnetA:
    Description: Subnet Availibility Zone A for EFS Mount Point A
    Type: "AWS::EC2::Subnet::Id"

  PrivateSubnetB:
    Description: Subnet Availibility Zone A for EFS Mount Point B
    Type: "AWS::EC2::Subnet::Id"

  Environment:
    Description: Enter Production or Sandbox
    Type: String
    AllowedValues:
      - Production
      - Sandbox
      - Development

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Deployment Environment"
        Parameters: 
          - Environment
      -
        Label: 
          default: "SCP Users"
        Parameters: 
          - CiscoCUCMUser
          - SCPUser
          - FTPT4User
          - LIDeveloperUser
          - ClearPassUser
      -
        Label:
          default: "EC2 Configuration"
        Parameters:
          - EC2Name
          - ImageID
          - InstanceType
          - EC2Subnets
          - prefixname
          - ELBSecurityGroupName
          - SSHKeyName
      -
        Label:
          default: "ELB Configuration"
        Parameters:
          - ELBSecurityGroupName
      - Label:
          default: "EFS Configuration"
        Parameters:
          - VolumeName
          - PrivateSubnetA
          - PrivateSubnetB
    ParameterLabels: 
      Environment: 
        default: "Which environment should this be deployed to?"

Mappings:

  AccountIDMap:
    Accounts:
      '535435516565': 'Production'
      '535435516565': 'Development'

  EnvironmentMap:
    Envtype:
        'Sandbox': 'si'
        'Development': 'd'
        'Staging': 'u'
        'Production': 'p'

Conditions:

  CreateProdResources: 
    'Fn::Equals': 
      - Ref: Environment 
      - Production

  CreateSandboxResources: 
    'Fn::Equals':
      - Ref: Environment 
      - Sandbox

Resources:

################################### security group configurations ######################

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: CSE jenkins Security Group
      VpcId: !Ref VPC
      SecurityGroupEgress:
      -
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref myip
        Description: DNS Port
      -
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref myip 
        Description: DNS Port
      Tags: 
        -
          Key: Name
          Value: !Join [ "-", [!FindInMap [EnvironmentMap, Envtype , !Ref Environment], "ec2", !Ref prefixname ]]

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for mount target
      Tags: 
        -
          Key: Name
          Value: !Join [ "-", [!FindInMap [EnvironmentMap, Envtype , !Ref Environment], "efs", !Ref prefixname ]]
        -
          Key: Role
          Value: Web

  EC2SecurityIngressRuleTCP22:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: SSH Port
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref  ELBSecurityGroup
      GroupId: !Ref EC2SecurityGroup

  ELBSecurityEgressRuleTCP22:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: SSH Port
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref EC2SecurityGroup
      GroupId: !Ref ELBSecurityGroup
 
  EC2SecurityIngressRuleTCP80:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: SSH Port
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref  ELBSecurityGroup
      GroupId: !Ref EC2SecurityGroup

  ELBSecurityEgressRuleTCP80:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: SSH Port
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      DestinationSecurityGroupId: !Ref EC2SecurityGroup
      GroupId: !Ref ELBSecurityGroup

  EC2SecurityIngressRuleTCP2049:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: EFS Port
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref MountTargetSecurityGroup
      GroupId: !Ref EC2SecurityGroup
  
  EC2SecurityEgressRuleTCP2049:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: EFS Port 
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      DestinationSecurityGroupId: !Ref MountTargetSecurityGroup
      GroupId: !Ref EC2SecurityGroup

  MountTargetSecurityIngressRuleTCP2049:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: EFS Port
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      GroupId: !Ref  MountTargetSecurityGroup

  MountTargetSecurityEgressRuleTCP2049:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: EFS Port 
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      DestinationSecurityGroupId: !Ref EC2SecurityGroup
      GroupId: !Ref  MountTargetSecurityGroup

########################## EFS file system create ###################################

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
        -
         Key: Name
         Value: !Ref VolumeName
        -
         Key: Role
         Value: Storage

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PrivateSubnetA
      SecurityGroups:
      - Ref: MountTargetSecurityGroup

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PrivateSubnetB
      SecurityGroups:
      - Ref: MountTargetSecurityGroup

########################security groups elb ############################################

  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      -
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref myip
        Description: SSH Port
      -
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref myip
        Description: http  Port
      Tags: 
        -
          Key: Name
          Value: !Join [ "-", [!FindInMap [EnvironmentMap, Envtype , !Ref Environment], "elb", !Ref prefixname ]]
        -
          Key: Role
          Value: Web

########################### Load Balancer ###################################

  ELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      LoadBalancerName: !Join [ "-", [!FindInMap [EnvironmentMap, Envtype , !Ref Environment], "elb", !Ref prefixname ]]
      Scheme: internet-facing 
      Subnets: !Ref EC2Subnets
      HealthCheck:
        HealthyThreshold: 10
        Interval: 30
        Target: TCP:22
        Timeout: 5
        UnhealthyThreshold: 2
      ConnectionDrainingPolicy:
        Enabled: false
      ConnectionSettings:
        IdleTimeout: 3600
      CrossZone: true
      SecurityGroups: 
        - !Ref ELBSecurityGroup
      Listeners:
        -
          InstancePort: 8080
          LoadBalancerPort: 80
          Protocol: TCP
          InstanceProtocol: TCP
      Tags: 
        -
          Key: Name
          Value: !Join [ "-", [!FindInMap [EnvironmentMap, Envtype , !Ref Environment], "elb", !Ref prefixname ]]
        -
          Key: Role
          Value: Web
  EC2Role:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "ec2.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /
        Policies:
          -
            PolicyName: Policy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "ssm:DescribeAssociation"
                    - "ssm:GetDeployablePatchSnapshotForInstance"
                    - "ssm:GetDocument"
                    - "ssm:GetParameters"
                    - "ssm:ListAssociations"
                    - "ssm:ListInstanceAssociations"
                    - "ssm:PutInventory"
                    - "ssm:UpdateAssociationStatus"
                    - "ssm:UpdateInstanceAssociationStatus"
                    - "ssm:UpdateInstanceInformation"
                  Resource: "*"

  EC2Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

##################### Auto scaling group ##################################

  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      Cooldown: 900
      DesiredCapacity: !Ref ASGDesiredCapacity
      MaxSize: 1
      MinSize: 0
      HealthCheckGracePeriod: 900
      HealthCheckType: EC2
      VPCZoneIdentifier: !Ref EC2Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      NotificationConfigurations:
        "Fn::If":
          - CreateProdResources
          - - TopicARN:
                !Join [ "", [ "arn:aws:sns:", !Ref "AWS::Region",":", !Ref "AWS::AccountId", ":CSE-EC2Alarms"]]
              NotificationTypes:
              - autoscaling:EC2_INSTANCE_LAUNCH
              - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
              - autoscaling:EC2_INSTANCE_TERMINATE
              - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
          - - !Ref "AWS::NoValue"
      LoadBalancerNames:
        - !Ref ELB
      Tags: 
        -
          Key: Name
          Value: !Ref EC2Name
          PropagateAtLaunch: true
        -
          Key: Role
          Value: Application
          PropagateAtLaunch: true

  StagingScheduledActionUp:
    Type: "AWS::AutoScaling::ScheduledAction"
    Condition: CreateSandboxResources
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: 1
      MaxSize: 1
      MinSize: 0
      Recurrence: "0 7 * * 1-5"

  StagingScheduledActionDown:
    Type: "AWS::AutoScaling::ScheduledAction"
    Condition: CreateSandboxResources
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: 0
      MaxSize: 1
      MinSize: 0
      Recurrence: "0 20 * * *"

##################### Bootstrap instance ############################

  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install_all:
            - create_users
            - configure_users
            - configure_sshd
            - configure_jenkins
            - configure_efs
            - configure_git
        create_users:
          A-add-user:
              users: 
               scp-user 
          commands:
            B-set-pwd:
              command: "echo $SCPPWD | passwd scp-user --stdin"
              env: 
                SCPPWD: !Ref "SCPUSER"
        configure_efs:
          commands:
            A-display-fs:
                command:  "df -h"
            B-mount_efs_to_jenkins_home_directory:
              command: "mount -t efs $EFSFS:/ /var/lib/jenkins"
              env: 
                EFSFS: !Join [ ".", [ !Ref "FileSystem", "efs", !Ref "AWS::Region", "amazonaws.com"]]
              waitAfterCompletion: 60
            C-start_jenkins:
                command:  "service jenkins start ; df -h "
        configure_sshd:
          commands:
            A-configure_sshd:
              command: "echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config" 
            B-remove-password-no_sshd:
              command: "sed -i 's/PasswordAuthentication no/#PasswordAuthentication no/g' /etc/ssh/sshd_config"
            C-restart_ssh:
              command: "service sshd restart"
        configure_users:
          commands:
            A-create_dir:
              command: "mkdir /scp"
            B-chroot_users:
              command: "chown 'scp-user' /scp"
            C-folder_permissions:
              command: "chmod 777 /home/scp-user"
        configure_jenkins:
          commands:
            A-create_setuprepo:
              command: "sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo"
            B-get-key:
              command: "sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key"
            C-install_java:
              command:  "sudo yum install java -y"
            C-install_jenkins:
              command:  "sudo yum install jenkins -y"
        configure_git:
          commands:
            A-create_git:
              command: "sudo yum install git -y"

    Properties:
      ImageId: !Ref ImageID
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyName
      SecurityGroups: 
        - !Ref EC2SecurityGroup
        - !Ref ELBSecurityGroup
      BlockDeviceMappings:  
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 50
      UserData:
        "Fn::Base64":
          !Sub  |
            #!/bin/bash -xe
            yum update -y
            yum install -y amazon-efs-utils
            useradd scp-user
            /opt/aws/bin/cfn-init --stack ${AWS::StackId} --resource LaunchConfig --configsets install_all --region ${AWS::Region} 

########################### output variables ##############################
Outputs:
    EFSFileSystem:
      Description: EFS file system 
      Value: !Ref FileSystem
    EFSMountIPA:
      Description: efs ip address a
      Value:  !GetAtt "MountTarget1.IpAddress"
    EFSMountIPB:
      Description: efs ip address b
      Value:  !GetAtt "MountTarget2.IpAddress"
    loadbalancername:
      Description: load balancer
      Value:  !Ref ELB 
      

